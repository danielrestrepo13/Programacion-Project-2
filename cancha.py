class Cancha:
    """ 
    Clase base para representar una cancha del complejo deportivo.
    Tiene los atributos de nombre, tipo de cancha (sint√©tica o v√≥ley playa), costo x hora (incremento en tarifa nocturna) y los horarios disponibles.
    """

    def __init__(self, nombre, tipo, costo_hora, costo_hora_nocturna=None):
        self.__nombre = nombre
        self.__tipo = tipo
        self.__costo_hora = costo_hora
        self.__costo_hora_nocturna = costo_hora_nocturna if costo_hora_nocturna is not None else costo_hora + 5000

        # Horarios disponibles de 10:00 am a 9:00 pm (√∫ltimo horario es de 9:00 a 10:00 pm)
        self.horarios_disponibles = [f"{hora}:00" for hora in range(10,22)]

    # Getters
    def get_nombre(self):
        """ Retorna el nombre de la cancha """
        return self.__nombre
    
    def get_tipo(self): 
        """ Retorna el tipo de cancha """
        return self.__tipo
    
    def get_costo(self, hora=None):
        """ Retorna el costo por hora de la cancha seg√∫n el horario """
        if hora is None:
            return self.__costo_hora
        
        # Verificar si es horario nocturno (despu√©s de las 6:00 pm)
        hora_num = int(hora.split(":")[0])
        if hora_num >= 18: # 18:00 = 6:00 pm
            return self.__costo_hora_nocturna
        return self.__costo_hora
    
    def get_costo_nocturna(self):
        """ Retorna el costo por hora en tarifa nocturna """
        return self.__costo_hora_nocturna
    
    def es_horario_nocturno(self, hora):
        """ Verificar si una hora corresponde a tarifa nocturna """
        hora_num = int(hora.split(":")[0])
        return hora_num >= 18 # 18:00 = 6:00 pm

    def mostrar_horarios(self):
        """ Mostramos los horarios disponibles de las canchas en formato numerado """
        print(f"‚è∞ Horarios disponibles para {self.__nombre}:")
        if not self.horarios_disponibles:
            print("‚ùå No hay horarios disponibles para esta cancha.")
            return False
        
        for i, hora in enumerate(self.horarios_disponibles, 1):
            # Convertir la hora a un formato m√°s amigable con el usuario
            hora_inicio = int(hora.split(":")[0])
            hora_fin = hora_inicio + 1

            # Verificar si es tarifa nocturna
            es_nocturna = self.es_horario_nocturno(hora)
            precio = self.get_costo(hora)

            # Mostrar horario con tarifa nocturna / si aplica
            if es_nocturna:
                print(f"{i}.{hora_inicio}:00 a {hora_fin}:00 - üí∞ ${precio} (Tarifa nocturna)")
            else:
                print(f"{i}.{hora_inicio}:00 a {hora_fin}:00 - üí∞${precio}")

        return True
    
    def reservar_horario_por_indice(self, indice):
        """ Reservar un horario escogiendo por √≠ndice en la lista de horarios disponibles."""

        if 1 <= indice <= len(self.horarios_disponibles):
            hora = self.horarios_disponibles.pop(indice - 1)
            return hora
        return None # Retorna None si el √≠ndice es inv√°lido
    
    def reservar_horario(self, hora):
        """ Reservar un horario si est√° disponible """

        if hora in self.horarios_disponibles:
            self.horarios_disponibles.remove(hora)
            return True
        return False
    
    def cancelar_reserva(self, hora):
        """ Cancelar una reserva y volver a agregar el horario a los horarios disponibles. """
        if hora not in self.horarios_disponibles:
            self.horarios_disponibles.append(hora)
            self.horarios_disponibles.sort() # Ordenamos los horarios con sort (ordena los elementos de una lista en su lugar)

    def mostrar_info(self):
        """ Mostramos la informaci√≥n de la cancha. """
        print(f"üè∑ Nombre: {self.__nombre}")
        print(f"üîñ Tipo de cancha: {self.__tipo}")
        print(f"üí∞ Costo por hora (hasta las 18:00): ${self.__costo_hora}")
        print(f"üí∞ Costo por hora (despu√©s de 18:00): ${self.__costo_hora_nocturna}")
        print(f"‚è∞ Horarios disponibles: {len(self.horarios_disponibles)}")
    
class CanchaSintetica(Cancha):
    """ Este clase se refiere a la cancha sint√©tica y hereda de Cancha """

    def __init__(self):
        """ Iniciamos una cancha sint√©tica con valores preestablecidos. Usamos super() para acceder a los m√©todos y propiedades de una clase padre. """
        super().__init__("Cancha Sint√©tica", "Sint√©tica", 40000)

    def mostrar_info(self):
        """ Sobreescribimos el m√©todo mostrar_info de la clase Cancha para mostrar la nueva informaci√≥n de esta cancha. """
        print("=" * 50)
        print("‚öΩ CANCHA SINT√âTICA ‚öΩ")
        super().mostrar_info()
        print("üå± Caracter√≠sticas: C√©sped artificial, ideal para f√∫tbol")
        print("=" * 50)

class CanchaVoleyPlaya(Cancha):
    """ Este clase se refiere a la cancha v√≥ley playa y hereda de Cancha """
    def __init__(self):
        """ Iniciamos una cancha con valores preestablecidos. """
        super().__init__("Cancha V√≥ley Playa", "V√≥ley Playa", 50000)

    def mostrar_info(self):
        print("=" * 50)
        print("üèê CANCHA V√ìLEY PLAYA üèê")
        super().mostrar_info()
        print("üèñÔ∏è Caracter√≠sticas: Arena fina, red profesional")
        print("=" * 50)
